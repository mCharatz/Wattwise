version: "2.23"

services:
  frontend:
    container_name: frontend
    build:
      context: /frontend
      dockerfile: Dockerfile
    env_file:
      - docker.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: always
    networks:
      - wattwise_network_frontend_backend
  backend:
    container_name: backend
    env_file:
      - docker.env
    build:
      context: /backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - database
    restart: always
    networks:
      - wattwise_network_frontend_backend
      - wattwise_network_backend_database
  database:
    container_name: database
    image: timescale/timescaledb:latest-pg14
    env_file:
      - docker.env
    volumes:
      - database_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - wattwise_network_backend_database
  redis:
    container_name: redis
    image: redis:latest
    env_file:
      - docker.env
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis_data:/data
  task_scheduler:
    container_name: task_scheduler
    build:
      context: /task_scheduler
      dockerfile: Dockerfile
    env_file:
      - docker.env
    depends_on:
      - backend
      - redis
    restart: always
  consumption_worker:
    container_name: consumption_worker
    build:
      context: /consumption_worker
      dockerfile: Dockerfile
    env_file:
      - docker.env
    depends_on:
      - backend
      - database
      - redis
    restart: always
  forecasting_worker:
    container_name: forecasting_worker
    build:
      context: /forecasting_worker
      dockerfile: Dockerfile
    env_file:
      - docker.env
    depends_on:
      - backend
      - database
      - redis
    restart: always
  aggregation_worker:
    container_name: aggregation_worker
    build:
      context: /aggregation_worker
      dockerfile: Dockerfile
    env_file:
      - docker.env
    depends_on:
      - backend
      - database
      - redis
    restart: always
  clustering_worker:
    container_name: clustering_worker
    build:
      context: /clustering_worker
      dockerfile: Dockerfile
    env_file:
      - docker.env
    depends_on:
      - backend
      - database
      - redis
    restart: always

volumes:
  database_data:
    driver: local
  redis_data:
    driver: local
networks:
  wattwise_network_frontend_backend:
    driver: bridge
  wattwise_network_backend_database:
    driver: bridge

